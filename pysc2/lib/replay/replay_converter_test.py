# Copyright 2021 DeepMind Technologies Ltd. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import itertools
import pickle

from absl.testing import absltest
import numpy as np
from pysc2.env.converter.proto import converter_pb2
from pysc2.lib.replay import replay_converter
import tree

from pysc2.lib import gfile
from pysc2.lib import resources
from s2clientprotocol import common_pb2

_REPLAY_FILE_NAME = 'pysc2/lib/replay/test_data/replay_09.SC2Replay'
_CONTROL_FILE_NAME = 'pysc2/lib/replay/test_data/replay_09.pkl'
_FRAMES_TO_TEST = 25
_NUM_UNIT_FEATURES = 46

_CONVERTER_SETTINGS = converter_pb2.ConverterSettings(
    raw_settings=converter_pb2.ConverterSettings.RawSettings(
        resolution=common_pb2.Size2DI(x=256, y=256),
        max_unit_count=512,
        num_unit_features=_NUM_UNIT_FEATURES,
        max_unit_selection_size=64,
        shuffle_unit_tags=True,
        enable_action_repeat=True,
        use_camera_position=True,
        camera=True,
        use_virtual_camera=True,
        virtual_camera_dimensions=converter_pb2.ConverterSettings.RawSettings
        .CameraDimensions(left=16, right=16, top=13, bottom=7),
        add_effects_to_units=True,
        add_cargo_to_units=True,
        mask_offscreen_enemies=True),
    minimap=common_pb2.Size2DI(x=128, y=128),
    minimap_features=[
        'height_map', 'visibility_map', 'creep', 'player_relative', 'alerts',
        'pathable', 'buildable'
    ],
    num_action_types=556,
    num_unit_types=236,
    num_upgrade_types=90,
    max_num_upgrades=40,
    camera_width_world_units=24,
    mmr=6000,
    supervised=True,
    crop_to_playable_area=False)

_EXPECTED_GAME_LOOPS = [
    0, 8, 18, 25, 35, 40, 43, 54, 57, 61, 71, 76, 203, 206, 211, 215, 220, 236,
    241, 244, 247, 250, 254, 283, 285, 287, 290, 297, 315, 332, 335, 401, 457,
    472, 526, 531, 534, 535, 538, 541, 565, 568, 571, 574, 575, 580, 585, 590,
    597, 618, 620, 623, 626, 629, 633, 637, 640, 643, 646, 675, 701, 703, 713,
    716, 719, 885, 902, 903, 909, 912, 915, 918, 921, 924, 932, 935, 938, 941,
    952, 954, 957, 961, 973, 977, 983, 1000, 1003, 1006, 1009, 1013, 1033, 1037,
    1043, 1052, 1065, 1069, 1070, 1072, 1098, 1102, 1140, 1158, 1181, 1196,
    1197, 1200, 1209, 1217, 1224, 1230, 1232, 1233, 1235, 1278, 1281, 1283,
    1286, 1291, 1294, 1296, 1321, 1324, 1343, 1357, 1360, 1361, 1364, 1389,
    1391, 1410, 1436, 1440, 1443, 1471, 1474, 1478, 1518, 1520, 1522, 1540,
    1563, 1569, 1592, 1612, 1615, 1616, 1653, 1714, 1793, 1920, 2047, 2137,
    2149, 2166, 2173, 2195, 2265, 2288, 2293, 2295, 2300, 2304, 2307, 2311,
    2316, 2318, 2321, 2324, 2327, 2330, 2333, 2340, 2401, 2405, 2409, 2412,
    2497, 2498, 2519, 2523, 2526, 2529, 2530, 2533, 2536, 2547, 2549, 2550,
    2555, 2582, 2700, 2716, 2727, 2732, 2756, 2788, 2791, 2792, 2795, 2844,
    2868, 2871, 2878, 2883, 2969, 2985, 3027, 3045, 3055, 3058, 3077, 3087,
    3089, 3091, 3117, 3126, 3189, 3197, 3201, 3205, 3225, 3228, 3231, 3234,
    3237, 3240, 3243, 3247, 3250, 3258, 3270, 3271, 3273, 3292, 3294, 3299,
    3315, 3329, 3333, 3351, 3359, 3361, 3362, 3369, 3372, 3375, 3378, 3384,
    3387, 3389, 3395, 3401, 3427, 3428, 3438, 3464, 3470, 3474, 3539, 3548,
    3551, 3555, 3568, 3577, 3588, 3620, 3634, 3659, 3672, 3716, 3720, 3735,
    3746, 3748, 3751, 3800, 3803, 3805, 3823, 3860, 3872, 3883, 3889, 3932,
    3939, 3951, 3980, 3982, 3987, 3990, 3998, 4010, 4014, 4018, 4024, 4031,
    4043, 4056, 4072, 4088, 4112, 4116, 4121, 4126, 4129, 4141, 4151, 4154,
    4157, 4160, 4164, 4171, 4172, 4183, 4194, 4198, 4200, 4201, 4206, 4208,
    4214, 4217, 4239, 4243, 4247, 4252, 4256, 4263, 4269, 4270, 4273, 4275,
    4278, 4280, 4296, 4299, 4308, 4311, 4315, 4328, 4348, 4361, 4396, 4398,
    4403, 4409, 4417, 4432, 4437, 4452, 4455, 4469, 4479, 4488, 4492, 4493,
    4495, 4517, 4534, 4540, 4542, 4552, 4558, 4639, 4640, 4642, 4645, 4647,
    4672, 4692, 4695, 4722, 4724, 4757, 4763, 4826, 4845, 4849, 4882, 4888,
    4905, 4953, 4977, 4984, 4990, 4993, 5006, 5013, 5020, 5028, 5030, 5033,
    5036, 5039, 5042, 5045, 5048, 5052, 5065, 5066, 5069, 5081, 5092, 5110,
    5138, 5156, 5169, 5238, 5241, 5264, 5268, 5271, 5280, 5282, 5296, 5300,
    5309, 5346, 5365, 5367, 5369, 5374, 5435, 5436, 5441, 5444, 5448, 5452,
    5490, 5497, 5500, 5508, 5520, 5526, 5537, 5540, 5549, 5550, 5554, 5566,
    5570, 5573, 5577, 5580, 5587, 5596, 5613, 5615, 5616, 5618, 5631, 5639,
    5642, 5680, 5703, 5726, 5729, 5731, 5766, 5770, 5800, 5803, 5806, 5825,
    5862, 5868, 5871, 5872, 5877, 5880, 5900, 5904, 5908, 5919, 5924, 5927,
    5942, 5949, 5956, 5959, 5962, 5967, 5975, 5998, 5999, 6002, 6025, 6028,
    6070, 6080, 6081, 6086, 6103, 6104, 6109, 6113, 6117, 6170, 6181, 6205,
    6219, 6222, 6225, 6241, 6244, 6296, 6300, 6304, 6307, 6314, 6317, 6320,
    6365, 6366, 6369, 6371, 6373, 6376, 6382, 6383, 6388, 6389, 6394, 6395,
    6409, 6415, 6421, 6424, 6427, 6455, 6476, 6478, 6486, 6489, 6491, 6503,
    6512, 6520, 6526, 6530, 6548, 6568, 6579, 6589, 6611, 6615, 6618, 6627,
    6628, 6633, 6645, 6648, 6653, 6673, 6674, 6690, 6723, 6740, 6771, 6799,
    6802, 6812, 6817, 6825, 6856, 6864, 6866, 6869, 6873, 6876, 6887, 6951,
    6975, 6979, 7014, 7027, 7063, 7067, 7076, 7079, 7087, 7099, 7102, 7106,
    7118, 7133, 7138, 7144, 7145, 7146, 7148, 7161, 7167, 7171, 7172, 7194,
    7207, 7241, 7246, 7266, 7300, 7312, 7318, 7322, 7328, 7335, 7346, 7361,
    7364, 7377, 7384, 7391, 7395, 7407, 7416, 7421, 7429, 7443, 7449, 7455,
    7461, 7464, 7468, 7470, 7474, 7477, 7488, 7498, 7502, 7505, 7513, 7519,
    7529, 7535, 7538, 7541, 7547, 7562, 7565, 7577, 7584, 7594, 7597, 7613,
    7616, 7624, 7633, 7643, 7650, 7665, 7678, 7683, 7693, 7695, 7714, 7728,
    7735, 7741, 7745, 7758, 7774, 7797, 7811, 7829, 7833, 7872, 7875, 7879,
    7892, 7904, 7909, 7914, 7918, 7921, 7925, 7940, 7954, 7976, 7983, 7987,
    7990, 7993, 8040, 8050, 8092, 8094, 8101, 8105, 8108, 8140, 8147, 8150,
    8173, 8180, 8191, 8196, 8203, 8206, 8213, 8225, 8232, 8238, 8246, 8249,
    8252, 8258, 8269, 8272, 8275, 8288, 8292, 8304, 8305, 8317, 8325, 8337,
    8340, 8344, 8353, 8370, 8379, 8389, 8396, 8403, 8419, 8423, 8427, 8433,
    8438, 8443, 8456, 8462, 8469, 8478, 8483, 8487, 8493, 8499, 8501, 8505,
    8511, 8518, 8524, 8530, 8533, 8537, 8538, 8541, 8557, 8560, 8561, 8567,
    8576, 8577, 8580, 8586, 8592, 8593, 8616, 8620, 8648, 8652, 8656, 8659,
    8666, 8674, 8681, 8684, 8692, 8694, 8697, 8698, 8700, 8708, 8711, 8718,
    8725, 8738, 8741, 8746, 8748, 8754, 8759, 8767, 8772, 8777, 8782, 8790,
    8854, 8862, 8867, 8878, 8879, 8887, 8894, 8897, 8900, 8913, 8915, 8920,
    8939, 8943, 8951, 8963, 8969, 9041, 9049, 9054, 9059, 9062, 9068, 9075,
    9077, 9081, 9085, 9093, 9095, 9107, 9114, 9118, 9127, 9129, 9131, 9146,
    9150, 9156, 9159, 9169, 9177, 9182, 9185, 9198, 9202, 9205, 9218, 9219,
    9221, 9222, 9224, 9226, 9228, 9234, 9244, 9254, 9264, 9270, 9280, 9283,
    9301, 9303, 9304, 9306, 9310, 9319, 9323, 9327, 9329, 9334, 9344, 9349,
    9360, 9373, 9376, 9388, 9399, 9414, 9425, 9434, 9445, 9450, 9457, 9458,
    9460, 9461, 9462, 9470, 9471, 9478, 9494, 9498, 9507, 9511, 9517, 9523,
    9524, 9527, 9553, 9556, 9560, 9565, 9568, 9578, 9579, 9583, 9585, 9588,
    9593, 9599, 9604, 9606, 9609, 9625, 9638, 9731, 9737, 9771, 9783, 9786,
    9808, 9815, 9822, 9834, 9837, 9841, 9844, 9853, 9858, 9871, 9880, 9883,
    9901, 9903, 9912, 9914, 9930, 9943, 9955, 10027, 10034, 10043, 10050, 10058,
    10061, 10064, 10067, 10071, 10077, 10086, 10090, 10094, 10097, 10110, 10112,
    10119, 10122, 10126, 10138, 10156, 10159, 10169, 10179, 10197, 10201, 10204,
    10207, 10220, 10228, 10233, 10248
]

_EXPECTED_DELAYS = [
    8, 10, 7, 10, 5, 3, 11, 3, 4, 10, 5, 127, 3, 5, 4, 5, 16, 5, 3, 3, 3, 4, 29,
    2, 2, 3, 7, 18, 17, 3, 66, 56, 15, 54, 5, 3, 1, 3, 3, 24, 3, 3, 3, 1, 5, 5,
    5, 7, 21, 2, 3, 3, 3, 4, 4, 3, 3, 3, 29, 26, 2, 10, 3, 3, 166, 17, 1, 6, 3,
    3, 3, 3, 3, 8, 3, 3, 3, 11, 2, 3, 4, 12, 4, 6, 17, 3, 3, 3, 4, 20, 4, 6, 9,
    13, 4, 1, 2, 26, 4, 38, 18, 23, 15, 1, 3, 9, 8, 7, 6, 2, 1, 2, 43, 3, 2, 3,
    5, 3, 2, 25, 3, 19, 14, 3, 1, 3, 25, 2, 19, 26, 4, 3, 28, 3, 4, 40, 2, 2,
    18, 23, 6, 23, 20, 3, 1, 37, 61, 79, 127, 127, 90, 12, 17, 7, 22, 70, 23, 5,
    2, 5, 4, 3, 4, 5, 2, 3, 3, 3, 3, 3, 7, 61, 4, 4, 3, 85, 1, 21, 4, 3, 3, 1,
    3, 3, 11, 2, 1, 5, 27, 118, 16, 11, 5, 24, 32, 3, 1, 3, 49, 24, 3, 7, 5, 86,
    16, 42, 18, 10, 3, 19, 10, 2, 2, 26, 9, 63, 8, 4, 4, 20, 3, 3, 3, 3, 3, 3,
    4, 3, 8, 12, 1, 2, 19, 2, 5, 16, 14, 4, 18, 8, 2, 1, 7, 3, 3, 3, 6, 3, 2, 6,
    6, 26, 1, 10, 26, 6, 4, 65, 9, 3, 4, 13, 9, 11, 32, 14, 25, 13, 44, 4, 15,
    11, 2, 3, 49, 3, 2, 18, 37, 12, 11, 6, 43, 7, 12, 29, 2, 5, 3, 8, 12, 4, 4,
    6, 7, 12, 13, 16, 16, 24, 4, 5, 5, 3, 12, 10, 3, 3, 3, 4, 7, 1, 11, 11, 4,
    2, 1, 5, 2, 6, 3, 22, 4, 4, 5, 4, 7, 6, 1, 3, 2, 3, 2, 16, 3, 9, 3, 4, 13,
    20, 13, 35, 2, 5, 6, 8, 15, 5, 15, 3, 14, 10, 9, 4, 1, 2, 22, 17, 6, 2, 10,
    6, 81, 1, 2, 3, 2, 25, 20, 3, 27, 2, 33, 6, 63, 19, 4, 33, 6, 17, 48, 24, 7,
    6, 3, 13, 7, 7, 8, 2, 3, 3, 3, 3, 3, 3, 4, 13, 1, 3, 12, 11, 18, 28, 18, 13,
    69, 3, 23, 4, 3, 9, 2, 14, 4, 9, 37, 19, 2, 2, 5, 61, 1, 5, 3, 4, 4, 38, 7,
    3, 8, 12, 6, 11, 3, 9, 1, 4, 12, 4, 3, 4, 3, 7, 9, 17, 2, 1, 2, 13, 8, 3,
    38, 23, 23, 3, 2, 35, 4, 30, 3, 3, 19, 37, 6, 3, 1, 5, 3, 20, 4, 4, 11, 5,
    3, 15, 7, 7, 3, 3, 5, 8, 23, 1, 3, 23, 3, 42, 10, 1, 5, 17, 1, 5, 4, 4, 53,
    11, 24, 14, 3, 3, 16, 3, 52, 4, 4, 3, 7, 3, 3, 45, 1, 3, 2, 2, 3, 6, 1, 5,
    1, 5, 1, 14, 6, 6, 3, 3, 28, 21, 2, 8, 3, 2, 12, 9, 8, 6, 4, 18, 20, 11, 10,
    22, 4, 3, 9, 1, 5, 12, 3, 5, 20, 1, 16, 33, 17, 31, 28, 3, 10, 5, 8, 31, 8,
    2, 3, 4, 3, 11, 64, 24, 4, 35, 13, 36, 4, 9, 3, 8, 12, 3, 4, 12, 15, 5, 6,
    1, 1, 2, 13, 6, 4, 1, 22, 13, 34, 5, 20, 34, 12, 6, 4, 6, 7, 11, 15, 3, 13,
    7, 7, 4, 12, 9, 5, 8, 14, 6, 6, 6, 3, 4, 2, 4, 3, 11, 10, 4, 3, 8, 6, 10, 6,
    3, 3, 6, 15, 3, 12, 7, 10, 3, 16, 3, 8, 9, 10, 7, 15, 13, 5, 10, 2, 19, 14,
    7, 6, 4, 13, 16, 23, 14, 18, 4, 39, 3, 4, 13, 12, 5, 5, 4, 3, 4, 15, 14, 22,
    7, 4, 3, 3, 47, 10, 42, 2, 7, 4, 3, 32, 7, 3, 23, 7, 11, 5, 7, 3, 7, 12, 7,
    6, 8, 3, 3, 6, 11, 3, 3, 13, 4, 12, 1, 12, 8, 12, 3, 4, 9, 17, 9, 10, 7, 7,
    16, 4, 4, 6, 5, 5, 13, 6, 7, 9, 5, 4, 6, 6, 2, 4, 6, 7, 6, 6, 3, 4, 1, 3,
    16, 3, 1, 6, 9, 1, 3, 6, 6, 1, 23, 4, 28, 4, 4, 3, 7, 8, 7, 3, 8, 2, 3, 1,
    2, 8, 3, 7, 7, 13, 3, 5, 2, 6, 5, 8, 5, 5, 5, 8, 64, 8, 5, 11, 1, 8, 7, 3,
    3, 13, 2, 5, 19, 4, 8, 12, 6, 72, 8, 5, 5, 3, 6, 7, 2, 4, 4, 8, 2, 12, 7, 4,
    9, 2, 2, 15, 4, 6, 3, 10, 8, 5, 3, 13, 4, 3, 13, 1, 2, 1, 2, 2, 2, 6, 10,
    10, 10, 6, 10, 3, 18, 2, 1, 2, 4, 9, 4, 4, 2, 5, 10, 5, 11, 13, 3, 12, 11,
    15, 11, 9, 11, 5, 7, 1, 2, 1, 1, 8, 1, 7, 16, 4, 9, 4, 6, 6, 1, 3, 26, 3, 4,
    5, 3, 10, 1, 4, 2, 3, 5, 6, 5, 2, 3, 16, 13, 93, 6, 34, 12, 3, 22, 7, 7, 12,
    3, 4, 3, 9, 5, 13, 9, 3, 18, 2, 9, 2, 16, 13, 12, 72, 7, 9, 7, 8, 3, 3, 3,
    4, 6, 9, 4, 4, 3, 13, 2, 7, 3, 4, 12, 18, 3, 10, 10, 18, 4, 3, 3, 13, 8, 5,
    15, 15
]


class ReplayConverterTest(absltest.TestCase):

  def _check_all_close_fn(self, path, x, y, key, step):
    # Unit tags don't necessarily agree from run to run.
    if key == 'raw_units':
      x[:, _NUM_UNIT_FEATURES] = 0
      y[:, _NUM_UNIT_FEATURES] = 0
    elif 'unit_tag' in key:
      return

    if not np.allclose(x, y):
      np.set_printoptions(threshold=np.inf)
      raise ValueError(
          f'step {step}, {key}, {path}, differences found at: '
          f'{np.argwhere(x != y)}, {x} vs {y}')

  def setUp(self):
    super().setUp()

    with gfile.Open(resources.GetResourceFilename(_REPLAY_FILE_NAME),
                    'rb') as f:
      self._replay_data = f.read()
    self._player_id = 1

  def test_game_loop_sequence(self):
    """Ensure the stream has the correct game loop sequence."""
    observation_stream = replay_converter.converted_observation_stream(
        replay_data=self._replay_data,
        player_id=self._player_id,
        converter_settings=_CONVERTER_SETTINGS)

    obs_list = list(itertools.islice(observation_stream, _FRAMES_TO_TEST))
    game_loops_from_stream = [int(obs['game_loop']) for obs in obs_list]

    self.assertEqual(_EXPECTED_GAME_LOOPS[:_FRAMES_TO_TEST],
                     game_loops_from_stream)

  def test_force_action_delay(self):
    """Ensure the stream has the correct force action delays."""
    observation_stream = replay_converter.converted_observation_stream(
        replay_data=self._replay_data,
        player_id=self._player_id,
        converter_settings=_CONVERTER_SETTINGS)

    obs_list = list(itertools.islice(observation_stream, _FRAMES_TO_TEST))
    delays_from_stream = [obs['action/delay'] for obs in obs_list]

    self.assertEqual(_EXPECTED_DELAYS[:_FRAMES_TO_TEST], delays_from_stream)

  def test_transformed_observations(self):
    """Ensure the stream has the correct observation contents."""
    observation_stream = replay_converter.converted_observation_stream(
        replay_data=self._replay_data,
        player_id=self._player_id,
        converter_settings=_CONVERTER_SETTINGS)

    with gfile.Open(resources.GetResourceFilename(_CONTROL_FILE_NAME),
                    'rb') as f:
      serialized_episode = pickle.load(f)

    for i, obs in enumerate(observation_stream):
      if i >= len(serialized_episode) or i >= _FRAMES_TO_TEST:
        break

      for key, value in obs.items():
        v1, v2 = value, serialized_episode[i][key]

        def _check(p, x, y, k=key, s=i):
          self._check_all_close_fn(p, x, y, k, s)

        tree.map_structure_with_path(_check, v1, v2)


if __name__ == '__main__':
  absltest.main()
